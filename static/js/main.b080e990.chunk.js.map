{"version":3,"sources":["configurations.ts","allocate.tsx","arrays.ts","model.ts","views/configurationMatrix.tsx","readWrite.tsx","views/hopSequence.tsx","views/traceView.tsx","views/situationView.tsx","App.tsx","index.tsx"],"names":["threeNodesOneRegion","regions","name","azs","map","az","idx","nodes","id","threeNodesThreeRegions","regName","regIdx","azName","azIdx","usersTableUnPartitioned","indexes","partitions","usersTableDupIndexes","region","zoneConfig","dataRegion","leaseholdersRegion","allocate","nodePath","schemaPath","downNodeIDs","partition","index","getZoneConfig","undefined","dataIfNotDown","regionName","type","lhsPinned","node","indexOf","nodeID","nodeDown","pinnedLeaseholders","max","arr","reduce","currMax","i","Math","Par","children","Leaf","desc","duration","RPC","process","remoteTrace","numNodesInFormation","f","sum","numNodesInRegion","reg","numNodesInAZ","nodesInRegion","flatMap","length","nodePathsForFormation","formation","nodePathsForRegion","nodePathsForAZ","partitionsInTable","table","partitionsInIndex","getReplicationStatus","situ","numReplicas","situation","config","filter","replicasForSchemaPath","totalNodes","quorumReplicas","min","ceil","desiredReplicas","statusForNodeSet","ids","downNodes","downInThisAZ","as","bs","int","forEach","a","push","intersection","ConfigurationView","props","react","className","colSpan","r","status","n","key","classNameForFormationNode","onClick","toggleFormationNodeDown","setDownNodeIDs","getAZStatus","setIDs","newIDs","concat","Object","toConsumableArray","out","item","removeAt","toggleDownList","toggleNodeDown","classNames","formation-node-fully-down","indexIdx","partitionIdx","replStatus","rowSpan","withZCIndicator","schema-node-underreplicated","schema-node-unavailable","np","allocation","explanation","all","presence","leaseholdersPinned","cellExplanation","title","renderCell","zc","zcDesc","localityStatus","formation-node-partially-down","nodesHere","b","union","without","traceForSQLWrite","sqlWrite","write","kvWrites","tableName","indexName","partitionName","gwNodePath","gateWayNodeID","find","Error","kvWrite","possLHNodes","possibilities","res","filterMap","p","join","schemaPathForKVWrite","some","possibleLeaseholderNodesForKVWrite","lhNode","replicaNodes","slice","rn","HORIZ_SPACING_PX","LEFT_PADDING","NODE_LINES_START","HopSequenceView","maxTime","sequence","h","yForTime","end","linesHeight","height","x","xForNode","y","setWrite","objectSpread","x1","x2","y1","y2","hop","hop-line-cross-region","from","to","hop-line-hovered","JSON","stringify","traceNode","highlightedTrace","onMouseOver","setHighlightedTrace","onMouseOut","start","time","hopSequenceForTrace","trace","hopSequenceRecurse","proc","child","hopLatency","fromNode","toNode","latency","remoteNodePath","remoteHops","remoteHopsDone","TraceView","react_default","createElement","trace-node-highlighted","onMouseEnter","onMouseLeave","ProcessNodeView","Fragment","SituationView","_useState","useState","_useState2","slicedToArray","writes","WriteView","_useState3","_useState4","_useState5","_useState6","collapseTrace","hopSequence","WriteDesc","partitionNames","value","onChange","evt","target","pn","development","basicProduction","naiveMultiregion","geoPartitionedReplicas","geoPartitionedLeaseholders","duplicateIndexes","IndexPage","href","PatternPreview","pattern","setDownNodes","react_router_dom","PatternPage","PATTERNS","App","react_router","path","component","exact","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.b080e990.chunk.js","sourcesContent":["import { Formation, Table } from \"./model\";\n\n// FORMATIONS\n\nexport const singleNode: Formation = {\n  regions: [\n    {\n      name: \"laptop\",\n      azs: [\n        {\n          name: \"N/A\",\n          nodes: [\n            {\n              id: 1\n            }\n          ]\n        }\n      ]\n    }\n  ]\n};\n\nexport const threeNodesOneRegion: Formation = {\n  regions: [\n    {\n      name: \"us-east\",\n      azs: [\"a\", \"b\", \"c\"].map((az, idx) => ({\n        name: az,\n        nodes: [\n          {\n            id: idx + 1\n          }\n        ]\n      }))\n    }\n  ]\n};\n\nexport const threeNodesThreeRegions: Formation = {\n  regions: [\"us-west\", \"us-central\", \"us-east\"].map((regName, regIdx) => ({\n    name: regName,\n    azs: [\"a\", \"b\", \"c\"].map((azName, azIdx) => ({\n      name: azName,\n      nodes: [\n        {\n          id: regIdx * 3 + azIdx + 1\n        }\n      ]\n    }))\n  }))\n};\n\n// TABLES\n\nexport const usersTableUnPartitioned: Table = {\n  name: \"users\",\n  indexes: [\n    {\n      name: \"primary\",\n      partitions: [{ name: \"default\" }]\n    }\n  ]\n};\n\nexport const usersTablePartitioned: Table = {\n  name: \"users\",\n  indexes: [\n    {\n      name: \"primary\",\n      partitions: [\n        {\n          name: \"west\",\n          zoneConfig: { leaseholdersRegion: null, dataRegion: \"us-west\" }\n        },\n        {\n          name: \"central\",\n          zoneConfig: { leaseholdersRegion: null, dataRegion: \"us-central\" }\n        },\n        {\n          name: \"east\",\n          zoneConfig: { leaseholdersRegion: null, dataRegion: \"us-east\" }\n        }\n      ]\n    }\n  ]\n};\n\nexport const usersTableLeaseholderPartitioned: Table = {\n  name: \"users\",\n  indexes: [\n    {\n      name: \"primary\",\n      partitions: [\n        {\n          name: \"west\",\n          zoneConfig: { leaseholdersRegion: \"us-west\", dataRegion: null }\n        },\n        {\n          name: \"central\",\n          zoneConfig: { leaseholdersRegion: \"us-central\", dataRegion: null }\n        },\n        {\n          name: \"east\",\n          zoneConfig: { leaseholdersRegion: \"us-east\", dataRegion: null }\n        }\n      ]\n    }\n  ]\n};\n\nexport const usersTableDupIndexes: Table = {\n  name: \"postal_codes\",\n  indexes: [\"us-west\", \"us-central\", \"us-east\"].map(region => ({\n    name: region,\n    zoneConfig: { dataRegion: null, leaseholdersRegion: region },\n    partitions: [{ name: \"default\" }]\n  }))\n};\n","import {\n  NodePath,\n  nodePathsForFormation,\n  SchemaPath,\n  Situation,\n  ZoneConfig,\n} from \"./model\";\n\n// TODO: leaseholders pinned\nexport type Allocation =\n  | { type: \"NoData\" }\n  | { type: \"Data\"; pinnedLeaseholders: boolean }\n  | { type: \"WouldHaveDataButDown\"; pinnedLeaseholders: boolean };\n\nexport function allocate(\n  nodePath: NodePath,\n  schemaPath: SchemaPath,\n  downNodeIDs: number[],\n): Allocation {\n  // TODO: this is pretty faulty.\n  //   kind of just trying to make it pass for the given cases.\n  const zoneConfig = getZoneConfig(schemaPath);\n  if (zoneConfig === undefined) {\n    return dataIfNotDown(downNodeIDs, nodePath, false);\n  }\n  if (zoneConfig.dataRegion === nodePath.regionName) {\n    return dataIfNotDown(downNodeIDs, nodePath, false);\n  }\n  if (zoneConfig.leaseholdersRegion !== null) {\n    return dataIfNotDown(\n      downNodeIDs,\n      nodePath,\n      zoneConfig.leaseholdersRegion === nodePath.regionName,\n    );\n  } else {\n    return { type: \"NoData\" };\n  }\n}\n\nfunction dataIfNotDown(\n  downNodeIDs: number[],\n  nodePath: NodePath,\n  lhsPinned: boolean,\n): Allocation {\n  if (nodeDown(downNodeIDs, nodePath)) {\n    return { type: \"WouldHaveDataButDown\", pinnedLeaseholders: lhsPinned };\n  }\n  return { type: \"Data\", pinnedLeaseholders: lhsPinned };\n}\n\nexport function nodeDown(downNodeIDs: number[], node: NodePath): boolean {\n  return downNodeIDs.indexOf(node.nodeID) !== -1;\n}\n\nfunction getZoneConfig(schemaPath: SchemaPath): ZoneConfig | undefined {\n  if (schemaPath.partition.zoneConfig) {\n    return schemaPath.partition.zoneConfig;\n  } else {\n    return schemaPath.index.zoneConfig;\n  }\n}\n\nexport function replicasForSchemaPath(\n  schemaPath: SchemaPath,\n  situation: Situation,\n): NodePath[] {\n  return nodePathsForFormation(situation.config.formation).filter(\n    nodePath =>\n      allocate(nodePath, schemaPath, situation.downNodeIDs).type === \"Data\",\n  );\n}\n","export function filterMap<A, B>(arr: A[], f: (t: A) => B | null): B[] {\n  const out: B[] = [];\n  arr.forEach(item => {\n    const res = f(item);\n    if (res === null) {\n      return;\n    }\n    out.push(res);\n  });\n  return out;\n}\n\nexport function max(arr: number[]): number {\n  return arr.reduce((currMax, i) => Math.max(currMax, i), 0);\n}\n\nexport function min(arr: number[]): number {\n  return arr.reduce((currMin, i) => Math.min(currMin, i), Infinity);\n}\n\nexport function removeAt<T>(arr: T[], idx: number): T[] {\n  const out: T[] = [];\n  arr.forEach((item, i) => {\n    if (i === idx) {\n      return;\n    }\n    out.push(item);\n  });\n  return out;\n}\n\nexport function intersection<T>(as: T[], bs: T[]): T[] {\n  const int: T[] = [];\n  as.forEach(a => {\n    if (bs.indexOf(a) !== -1) {\n      int.push(a);\n    }\n  });\n  return int;\n}\n\nexport function union<T>(as: T[], bs: T[]): T[] {\n  const out: T[] = [];\n  as.forEach(a => {\n    out.push(a);\n  });\n  bs.forEach(b => {\n    if (as.indexOf(b) !== -1) {\n      return;\n    }\n    out.push(b);\n  });\n  return out;\n}\n\nexport function without<T>(as: T[], without: T[]): T[] {\n  const out: T[] = [];\n  as.forEach(a => {\n    if (without.indexOf(a) !== -1) {\n      return;\n    }\n    out.push(a);\n  });\n  return out;\n}\n","import React from \"react\";\nimport { replicasForSchemaPath } from \"./allocate\";\nimport { intersection } from \"./arrays\";\n\nexport interface Situation {\n  config: Configuration;\n  downNodeIDs: number[];\n}\n\nexport interface Configuration {\n  table: Table;\n  formation: Formation;\n}\n\nexport interface Formation {\n  regions: Region[];\n}\n\nexport interface Region {\n  name: string;\n  azs: AZ[];\n}\n\nexport interface AZ {\n  name: string;\n  nodes: Node[];\n}\n\nexport interface Node {\n  id: number;\n}\n\nexport interface Table {\n  name: string;\n  indexes: Index[];\n  zoneConfig?: ZoneConfig;\n}\n\nexport interface Index {\n  name: string;\n  partitions: Partition[];\n  zoneConfig?: ZoneConfig;\n}\n\nexport interface Partition {\n  name: string;\n  zoneConfig?: ZoneConfig;\n}\n\nexport interface ZoneConfig {\n  leaseholdersRegion: string | null;\n  dataRegion: string | null;\n}\n\n// Traces & Hops\n\nexport interface TraceNode {\n  nodePath: NodePath;\n  process: ProcessNode;\n}\n\nexport type ProcessNode =\n  | { type: \"Parallel\"; children: ProcessNode[] }\n  // | { type: \"Sequence\"; children: ProcessNode[] }\n  | { type: \"Leaf\"; desc: string; duration: number }\n  | { type: \"RPC\"; remoteTrace: TraceNode; desc: string };\n\n// export function Seq(children: ProcessNode[]): ProcessNode {\n//   return { type: \"Sequence\", children };\n// }\n\nexport function Par(children: ProcessNode[]): ProcessNode {\n  return { type: \"Parallel\", children };\n}\n\nexport function Leaf(desc: string, duration: number): ProcessNode {\n  return { type: \"Leaf\", desc, duration };\n}\n\nexport function RPC(\n  nodePath: NodePath,\n  desc: string,\n  process: ProcessNode,\n): ProcessNode {\n  return { type: \"RPC\", desc, remoteTrace: { nodePath, process } };\n}\n\nexport type HopSequence = Hop[];\n\nexport interface Hop {\n  from: NodePath;\n  to: NodePath;\n  start: number;\n  end: number;\n  traceNode: TraceNode;\n}\n\n// helper funcs\n\nexport function numNodesInFormation(f: Formation): number {\n  return f.regions.reduce((sum, region) => sum + numNodesInRegion(region), 0);\n}\n\nexport function nodesInFormation(f: Formation): Node[] {\n  return f.regions.flatMap(r => nodesInRegion(r));\n}\n\nexport function numNodesInRegion(reg: Region): number {\n  return reg.azs.reduce((sum, az) => sum + numNodesInAZ(az), 0);\n}\n\nexport function nodesInRegion(reg: Region): Node[] {\n  return reg.azs.flatMap(az => az.nodes);\n}\n\nexport function numNodesInAZ(az: AZ): number {\n  return az.nodes.length;\n}\n\nexport interface NodePath {\n  regionName: string;\n  azName: string;\n  nodeID: number;\n}\n\nexport interface SchemaPath {\n  table: Table;\n  index: Index;\n  partition: Partition;\n}\n\nexport function nodePathsForFormation(formation: Formation): NodePath[] {\n  return formation.regions.flatMap(nodePathsForRegion);\n}\n\nfunction nodePathsForRegion(region: Region): NodePath[] {\n  return region.azs.flatMap(az => nodePathsForAZ(region.name, az));\n}\n\nfunction nodePathsForAZ(regionName: string, az: AZ): NodePath[] {\n  return az.nodes.map(node => ({\n    regionName,\n    azName: az.name,\n    nodeID: node.id,\n  }));\n}\n\nexport function nodePathToStr(np: NodePath): string {\n  return `${np.regionName}/${np.azName}/${np.azName}`;\n}\n\nexport function partitionsInTable(table: Table): number {\n  return table.indexes.reduce((sum, idx) => sum + partitionsInIndex(idx), 0);\n}\n\nexport function partitionsInIndex(index: Index): number {\n  return index.partitions.length;\n}\n\nexport type RegionName = string;\n\nexport function schemaPathForKVWrite(\n  table: Table,\n  kvWrite: KVWrite,\n): SchemaPath {\n  const index = table.indexes.find(i => i.name === kvWrite.indexName);\n  if (!index) {\n    throw new Error(\"index not found\"); // bah\n  }\n  const partition = index.partitions.find(\n    p => p.name === kvWrite.partitionName,\n  );\n  if (!partition) {\n    throw new Error(\n      `partition \"${\n        kvWrite.partitionName\n      }\" not found in [${index.partitions.map(p => `\"${p.name}\"`).join(\", \")}]`,\n    );\n  }\n  return {\n    table,\n    index,\n    partition,\n  };\n}\n\nexport function nodeForID(f: Formation, nodeID: number): NodePath | undefined {\n  return nodePathsForFormation(f).find(np => np.nodeID === nodeID);\n}\n\n// Writes\n\nexport interface SQLWrite {\n  gateWayNodeID: number;\n  tableName: string;\n  partitionName: string;\n}\n\nexport interface KVWrite {\n  tableName: string;\n  indexName: string;\n  partitionName: string;\n}\n\n// replication status\n\ntype ReplicationStatus = \"OK\" | \"Underreplicated\" | \"Unavailable\";\n\nexport function getReplicationStatus(\n  schemaPath: SchemaPath,\n  situ: Situation,\n): ReplicationStatus {\n  const numReplicas = replicasForSchemaPath(schemaPath, situ).length;\n  const totalNodes = numNodesInFormation(situ.config.formation);\n  const desiredReplicas = 3; // TODO: get from zone config\n  const quorumReplicas = Math.min(totalNodes, Math.ceil(desiredReplicas / 2));\n  if (numReplicas >= desiredReplicas) {\n    return \"OK\";\n  }\n  if (numReplicas < quorumReplicas) {\n    return \"Unavailable\";\n  }\n  return \"Underreplicated\";\n}\n\n// locality status\n\nexport type LocalityStatus = \"OK\" | \"PartiallyDown\" | \"FullyDown\";\n\nexport function getAZStatus(az: AZ, downNodes: number[]): LocalityStatus {\n  const ids = az.nodes.map(n => n.id);\n  return statusForNodeSet(ids, downNodes);\n}\n\nexport function getRegionStatus(\n  r: Region,\n  downNodes: number[],\n): LocalityStatus {\n  const ids = nodesInRegion(r).map(n => n.id);\n  return statusForNodeSet(ids, downNodes);\n}\n\nfunction statusForNodeSet(ids: number[], downNodes: number[]): LocalityStatus {\n  const downInThisAZ = intersection(ids, downNodes);\n  if (downInThisAZ.length === 0) {\n    return \"OK\";\n  }\n  if (downInThisAZ.length === ids.length) {\n    return \"FullyDown\";\n  }\n  return \"PartiallyDown\";\n}\n","import * as React from \"react\";\nimport {\n  Configuration,\n  getAZStatus,\n  getRegionStatus,\n  getReplicationStatus,\n  LocalityStatus,\n  NodePath,\n  nodePathsForFormation,\n  nodePathToStr,\n  nodesInRegion,\n  numNodesInAZ,\n  numNodesInFormation,\n  numNodesInRegion,\n  partitionsInIndex,\n  partitionsInTable,\n  SchemaPath,\n  ZoneConfig,\n} from \"../model\";\nimport { allocate, Allocation } from \"../allocate\";\nimport classNames from \"classnames\";\nimport { removeAt, union, without } from \"../arrays\";\n\nexport function ConfigurationView(props: {\n  config: Configuration;\n  downNodeIDs: number[];\n  setDownNodeIDs: (nowDown: number[]) => void;\n}) {\n  const table = props.config.table;\n\n  return (\n    <table className=\"config-view\">\n      <thead>\n        <tr>\n          <td />\n          <td className=\"schema-level-label\">Table</td>\n          <td className=\"schema-level-label\">Index</td>\n          <td className=\"schema-level-label\">Partition</td>\n          <td colSpan={numNodesInFormation(props.config.formation)} />\n        </tr>\n        <tr>\n          <th className=\"formation-level-label\">Region</th>\n          <th colSpan={3} />\n          {/* regions */}\n          {props.config.formation.regions.map(region => {\n            const status = getRegionStatus(region, props.downNodeIDs);\n            return (\n              <th\n                key={region.name}\n                colSpan={numNodesInRegion(region)}\n                className={classNameForFormationNode(status)}\n                onClick={() => {\n                  toggleFormationNodeDown(\n                    status,\n                    props.downNodeIDs,\n                    nodesInRegion(region).map(n => n.id),\n                    props.setDownNodeIDs,\n                  );\n                }}\n              >\n                {region.name}\n              </th>\n            );\n          })}\n        </tr>\n        <tr>\n          <th className=\"formation-level-label\">AZ</th>\n          <th colSpan={3} />\n          {/* az's */}\n          {props.config.formation.regions.map(region =>\n            region.azs.map(az => {\n              const status = getAZStatus(az, props.downNodeIDs);\n              return (\n                <th\n                  key={az.name}\n                  colSpan={numNodesInAZ(az)}\n                  className={classNameForFormationNode(status)}\n                  onClick={() => {\n                    toggleFormationNodeDown(\n                      status,\n                      props.downNodeIDs,\n                      az.nodes.map(n => n.id),\n                      props.setDownNodeIDs,\n                    );\n                  }}\n                >\n                  {az.name}\n                </th>\n              );\n            }),\n          )}\n        </tr>\n        <tr>\n          <th className=\"formation-level-label\">Node</th>\n          <td colSpan={3} />\n          {/* nodes */}\n          {props.config.formation.regions.map(region =>\n            region.azs.map(az =>\n              az.nodes.map(node => (\n                <th\n                  key={node.id}\n                  onClick={() =>\n                    toggleNodeDown(\n                      props.downNodeIDs,\n                      node.id,\n                      props.setDownNodeIDs,\n                    )\n                  }\n                  className={classNames(\n                    \"formation-node\",\n                    \"formation-node-leaf\",\n                    {\n                      \"formation-node-fully-down\":\n                        props.downNodeIDs.indexOf(node.id) !== -1,\n                    },\n                  )}\n                >\n                  n{node.id}\n                </th>\n              )),\n            ),\n          )}\n        </tr>\n      </thead>\n      <tbody>\n        {table.indexes.map((index, indexIdx) =>\n          index.partitions.map((partition, partitionIdx) => {\n            const schemaPath = {\n              table: props.config.table,\n              index: index,\n              partition: partition,\n            };\n            const replStatus = getReplicationStatus(schemaPath, {\n              config: props.config,\n              downNodeIDs: props.downNodeIDs,\n            });\n            return (\n              <tr key={`${index.name}/${partition.name}`}>\n                <td />\n                {indexIdx === 0 && partitionIdx === 0 ? (\n                  <td\n                    className={classNames(\"schema-node\")}\n                    rowSpan={partitionsInTable(table)}\n                  >\n                    {withZCIndicator(table.name, table.zoneConfig)}\n                  </td>\n                ) : null}\n                {partitionIdx === 0 ? (\n                  <td\n                    className={classNames(\"schema-node\")}\n                    rowSpan={partitionsInIndex(index)}\n                  >\n                    {withZCIndicator(index.name, index.zoneConfig)}\n                  </td>\n                ) : null}\n                <td\n                  className={classNames(\"schema-node\", \"schema-node-leaf\", {\n                    \"schema-node-underreplicated\":\n                      replStatus === \"Underreplicated\",\n                    \"schema-node-unavailable\": replStatus === \"Unavailable\",\n                  })}\n                >\n                  {withZCIndicator(partition.name, partition.zoneConfig)}\n                </td>\n                {nodePathsForFormation(props.config.formation).map(nodePath =>\n                  renderCell(nodePath, schemaPath, props.downNodeIDs),\n                )}\n              </tr>\n            );\n          }),\n        )}\n      </tbody>\n    </table>\n  );\n}\n\nfunction withZCIndicator(\n  name: string,\n  zc: ZoneConfig | undefined,\n): React.ReactNode {\n  const title = zc === undefined ? \"\" : zcDesc(zc);\n  return (\n    <span title={title}>\n      {name}\n      {zc === undefined ? \"\" : \"*\"}\n    </span>\n  );\n}\n\nfunction zcDesc(zc: ZoneConfig): string {\n  if (zc.leaseholdersRegion) {\n    return `zone config pinning leaseholders to region ${zc.leaseholdersRegion}`;\n  }\n  if (zc.dataRegion) {\n    return `zone config pinning data to region ${zc.dataRegion}`;\n  }\n  return \"\";\n}\n\nfunction classNameForFormationNode(localityStatus: LocalityStatus): string {\n  return classNames(\"formation-node\", {\n    \"formation-node-partially-down\": localityStatus === \"PartiallyDown\",\n    \"formation-node-fully-down\": localityStatus === \"FullyDown\",\n  });\n}\n\nfunction renderCell(\n  nodePath: NodePath,\n  schemaPath: SchemaPath,\n  downNodeIDs: number[],\n): React.ReactNode {\n  const key = nodePathToStr(nodePath);\n  const allocation = allocate(nodePath, schemaPath, downNodeIDs);\n  const explanation = cellExplanation(schemaPath, nodePath, allocation);\n  const className = (() => {\n    switch (allocation.type) {\n      case \"Data\":\n        return \"cell cell-data\";\n      case \"NoData\":\n        return \"cell cell-no-data\";\n      case \"WouldHaveDataButDown\":\n        return \"cell cell-data-but-down\";\n    }\n  })();\n  return (\n    <td key={key} title={explanation} className={className}>\n      {allocation.type === \"Data\" && allocation.pinnedLeaseholders ? \"LH\" : \"\"}\n    </td>\n  );\n}\n\nfunction cellExplanation(\n  schemaPath: SchemaPath,\n  nodePath: NodePath,\n  all: Allocation,\n) {\n  const presence =\n    all.type === \"Data\"\n      ? \"is present\"\n      : all.type === \"NoData\"\n      ? \"is not present\"\n      : \"would be present if the node were not down\";\n  const leaseholdersPinned =\n    all.type === \"Data\" && all.pinnedLeaseholders\n      ? \"Leaseholders have been pinned to this region.\"\n      : \"\";\n  return `Data for partition \"${schemaPath.partition.name}\" of index \"${schemaPath.index.name}\" of table \"${schemaPath.table.name}\" ${presence} on node ${nodePath.nodeID} in AZ ${nodePath.azName} of region ${nodePath.regionName}. ${leaseholdersPinned}`;\n}\n\nfunction toggleNodeDown(\n  ids: number[],\n  id: number,\n  setIDs: (newIDs: number[]) => void,\n) {\n  const newIDs = toggleDownList(ids, id);\n  setIDs(newIDs);\n}\n\nexport function toggleFormationNodeDown(\n  status: LocalityStatus,\n  downNodeIDs: number[],\n  nodesHere: number[],\n  setDownNodeIDs: (newIDs: number[]) => void,\n) {\n  if (status === \"OK\") {\n    setDownNodeIDs(union(downNodeIDs, nodesHere));\n  } else {\n    setDownNodeIDs(without(downNodeIDs, nodesHere));\n  }\n}\n\nfunction toggleDownList(ids: number[], id: number): number[] {\n  const index = ids.indexOf(id);\n  if (index === -1) {\n    return [...ids, id];\n  }\n  return removeAt(ids, index);\n}\n","import {\n  KVWrite,\n  Leaf,\n  nodeForID,\n  NodePath,\n  nodePathsForFormation,\n  Par,\n  RPC,\n  schemaPathForKVWrite,\n  Situation,\n  SQLWrite,\n  Table,\n  TraceNode,\n} from \"./model\";\nimport { allocate } from \"./allocate\";\nimport { filterMap } from \"./arrays\";\n\nexport function traceForSQLWrite(\n  situation: Situation,\n  sqlWrite: SQLWrite,\n): TraceNode {\n  const kvWrites = kvWritesForSQLWrite(situation.config.table, sqlWrite);\n  const gwNodePath = nodeForID(\n    situation.config.formation,\n    sqlWrite.gateWayNodeID,\n  );\n  if (!gwNodePath) {\n    throw new Error(\"gateway node not found\");\n  }\n  return {\n    nodePath: gwNodePath,\n    process: Par(\n      kvWrites.map(kvWrite => {\n        const possLHNodes = possibleLeaseholderNodesForKVWrite(\n          situation,\n          kvWrite,\n        );\n        const lhNode = possLHNodes[0];\n        const replicaNodes = possLHNodes.slice(1, 3);\n        return RPC(\n          lhNode,\n          `request leaseholder to write to index ${kvWrite.indexName}, partition ${kvWrite.partitionName}`,\n          Par([\n            Leaf(\"write data\", 1),\n            ...replicaNodes.map(rn =>\n              RPC(rn, \"replicate data to follower\", Leaf(\"write data\", 1)),\n            ),\n          ]),\n        );\n      }),\n    ),\n  };\n}\n\nfunction kvWritesForSQLWrite(table: Table, write: SQLWrite): KVWrite[] {\n  // TODO: detect if secondary indices don't have that partition\n  return table.indexes.map(idx => ({\n    tableName: table.name,\n    indexName: idx.name,\n    partitionName: write.partitionName,\n  }));\n}\n\nfunction possibleLeaseholderNodesForKVWrite(\n  situation: Situation,\n  kvWrite: KVWrite,\n): NodePath[] {\n  const possibilities = filterMap(\n    nodePathsForFormation(situation.config.formation),\n    nodePath => {\n      const schemaPath = schemaPathForKVWrite(situation.config.table, kvWrite);\n      const allocation = allocate(nodePath, schemaPath, situation.downNodeIDs);\n      if (allocation.type === \"NoData\") {\n        return null;\n      }\n      return {\n        nodePath,\n        leaseholdersPinned: allocation.pinnedLeaseholders,\n      };\n    },\n  );\n  const anyLeaseholdersPinned = possibilities.some(p => p.leaseholdersPinned);\n  return (anyLeaseholdersPinned\n    ? possibilities.filter(p => p.leaseholdersPinned)\n    : possibilities\n  ).map(p => p.nodePath);\n}\n","import * as React from \"react\";\nimport {\n  Formation,\n  Hop,\n  HopSequence,\n  NodePath,\n  nodePathsForFormation,\n  SQLWrite,\n  TraceNode,\n} from \"../model\";\nimport { max } from \"../arrays\";\nimport classNames from \"classnames\";\n\nconst HORIZ_SPACING_PX = 30;\nconst LEFT_PADDING = 20;\nconst NODE_LINES_START = 30;\n\nexport function HopSequenceView(props: {\n  formation: Formation;\n  sequence: HopSequence;\n  highlightedTrace: TraceNode | undefined;\n  setHighlightedTrace: (hp: TraceNode | undefined) => void;\n  write: SQLWrite;\n  setWrite: (w: SQLWrite) => void;\n}) {\n  const maxTime = max(props.sequence.map(h => yForTime(h.end)));\n  const linesHeight = yForTime(maxTime);\n  return (\n    <div className=\"hop-seq\">\n      <svg height={linesHeight}>\n        <g>\n          {nodePathsForFormation(props.formation).map(nodePath => {\n            const x = xForNode(nodePath.nodeID);\n            return (\n              <g key={nodePath.nodeID}>\n                <text\n                  className=\"node-label\"\n                  x={x - 10}\n                  y={20}\n                  onClick={() =>\n                    props.setWrite({\n                      ...props.write,\n                      gateWayNodeID: nodePath.nodeID,\n                    })\n                  }\n                >\n                  n{nodePath.nodeID}\n                </text>\n                <line\n                  className=\"node-line\"\n                  x1={x}\n                  x2={x}\n                  y1={NODE_LINES_START}\n                  y2={linesHeight}\n                />\n              </g>\n            );\n          })}\n        </g>\n        <g>\n          {props.sequence.map((hop, idx) => (\n            <line\n              key={idx}\n              className={classNames(\"hop-line\", {\n                \"hop-line-cross-region\":\n                  hop.from.regionName !== hop.to.regionName,\n                // TODO: use just ===...\n                //   I can't tell why object identity is being lost...\n                //   sigh\n                \"hop-line-hovered\":\n                  JSON.stringify(hop.traceNode) ===\n                  JSON.stringify(props.highlightedTrace),\n              })}\n              // TODO: these are very thin and hard to mouse over...\n              onMouseOver={() => props.setHighlightedTrace(hop.traceNode)}\n              onMouseOut={() => props.setHighlightedTrace(undefined)}\n              x1={xForNode(hop.from.nodeID)}\n              x2={xForNode(hop.to.nodeID)}\n              y1={yForTime(hop.start)}\n              y2={yForTime(hop.end)}\n            />\n          ))}\n        </g>\n      </svg>\n    </div>\n  );\n}\n\n// relies on nodeIDs increasing from left to right\nfunction xForNode(nodeID: number): number {\n  return nodeID * HORIZ_SPACING_PX + LEFT_PADDING;\n}\n\nfunction yForTime(time: number): number {\n  return NODE_LINES_START + time;\n}\n\nexport function hopSequenceForTrace(trace: TraceNode): Hop[] {\n  return hopSequenceRecurse(0, trace);\n}\n\nfunction latency(fromNode: NodePath, toNode: NodePath): number {\n  // TODO: more realistic...\n  if (fromNode.regionName === toNode.regionName) {\n    return 10;\n  }\n  return 100;\n}\n\nfunction hopSequenceRecurse(start: number, trace: TraceNode): Hop[] {\n  const proc = trace.process;\n  const nodePath = trace.nodePath;\n  switch (proc.type) {\n    case \"Parallel\":\n      return proc.children.flatMap(child =>\n        hopSequenceRecurse(start, { nodePath, process: child }),\n      );\n    case \"RPC\":\n      const hopLatency = latency(nodePath, proc.remoteTrace.nodePath);\n      const remoteNodePath = proc.remoteTrace.nodePath;\n      const remoteHops = hopSequenceRecurse(start + hopLatency, {\n        nodePath: remoteNodePath,\n        process: proc.remoteTrace.process,\n      });\n      const remoteHopsDone = max(remoteHops.map(h => h.end));\n      return [\n        {\n          from: nodePath,\n          to: remoteNodePath,\n          start: start,\n          end: start + hopLatency,\n          traceNode: trace,\n        },\n        ...remoteHops,\n        {\n          from: remoteNodePath,\n          to: nodePath,\n          start: remoteHopsDone,\n          end: remoteHopsDone + hopLatency,\n          traceNode: trace,\n        },\n      ];\n    case \"Leaf\":\n      return [\n        {\n          from: nodePath,\n          to: nodePath,\n          start: start,\n          end: start + proc.duration,\n          traceNode: trace,\n        },\n      ];\n  }\n}\n","import React from \"react\";\nimport { ProcessNode, TraceNode } from \"../model\";\nimport classNames from \"classnames\";\n\nexport function TraceView(props: {\n  trace: TraceNode;\n  highlightedTrace: TraceNode | undefined;\n  setHighlightedTrace: (hp: TraceNode | undefined) => void;\n}) {\n  return (\n    <ul className=\"trace-view\">\n      <li\n        className={classNames(\"trace-node\", {\n          \"trace-node-highlighted\":\n            JSON.stringify(props.highlightedTrace) ===\n            JSON.stringify(props.trace),\n        })}\n        onMouseEnter={() => props.setHighlightedTrace(props.trace)}\n        onMouseLeave={() => props.setHighlightedTrace(undefined)}\n      >\n        On n{props.trace.nodePath.nodeID}:{\" \"}\n        <ProcessNodeView\n          process={props.trace.process}\n          highlightedTrace={props.highlightedTrace}\n          setHighlightedTrace={props.setHighlightedTrace}\n        />\n      </li>\n    </ul>\n  );\n}\n\nfunction ProcessNodeView(props: {\n  process: ProcessNode;\n  highlightedTrace: TraceNode | undefined;\n  setHighlightedTrace: (hp: TraceNode | undefined) => void;\n}) {\n  switch (props.process.type) {\n    case \"Leaf\":\n      return <>{props.process.desc}</>;\n    case \"Parallel\":\n      return (\n        <>\n          In parallel:\n          <ul>\n            {props.process.children.map((proc, idx) => (\n              <li key={idx}>\n                <ProcessNodeView\n                  process={proc}\n                  setHighlightedTrace={props.setHighlightedTrace}\n                  highlightedTrace={props.highlightedTrace}\n                />\n              </li>\n            ))}\n          </ul>\n        </>\n      );\n    case \"RPC\":\n      return (\n        <>\n          call n{props.process.remoteTrace.nodePath.nodeID} to{\" \"}\n          {props.process.desc}\n          <TraceView\n            trace={props.process.remoteTrace}\n            setHighlightedTrace={props.setHighlightedTrace}\n            highlightedTrace={props.highlightedTrace}\n          />\n        </>\n      );\n  }\n}\n\nexport function collapseTrace(trace: TraceNode): TraceNode {\n  switch (trace.process.type) {\n    case \"RPC\":\n      if (trace.nodePath.nodeID === trace.process.remoteTrace.nodePath.nodeID) {\n        return collapseTrace(trace.process.remoteTrace);\n      }\n      return trace;\n    case \"Parallel\":\n      if (trace.process.children.length === 1) {\n        return { nodePath: trace.nodePath, process: trace.process.children[0] };\n      }\n      return trace;\n    default:\n      return trace;\n  }\n}\n","import * as React from \"react\";\nimport {\n  Configuration,\n  nodesInFormation,\n  Situation,\n  SQLWrite,\n  TraceNode,\n} from \"../model\";\nimport { ConfigurationView } from \"./configurationMatrix\";\nimport { traceForSQLWrite } from \"../readWrite\";\nimport { hopSequenceForTrace, HopSequenceView } from \"./hopSequence\";\nimport { useState } from \"react\";\nimport { collapseTrace, TraceView } from \"./traceView\";\n\nexport function SituationView(props: {\n  situation: Situation;\n  writes: { write: SQLWrite; desc: React.ReactNode }[];\n}) {\n  const [downNodeIDs, setDownNodeIDs] = useState(props.situation.downNodeIDs);\n\n  return (\n    <>\n      <ConfigurationView\n        config={props.situation.config}\n        downNodeIDs={downNodeIDs}\n        setDownNodeIDs={setDownNodeIDs}\n      />\n      {props.writes.length > 0 && (\n        <>\n          <h4>Simulated Writes</h4>\n          {props.writes.map((write, idx) => (\n            <WriteView key={idx} situation={props.situation} write={write} />\n          ))}\n        </>\n      )}\n    </>\n  );\n}\n\nfunction WriteView(props: {\n  situation: Situation;\n  write: { desc: React.ReactNode; write: SQLWrite };\n}) {\n  const [write, setWrite] = useState<SQLWrite>(props.write.write);\n  const [highlightedTrace, setHighlightedTrace] = useState<TraceNode>();\n\n  const trace = collapseTrace(traceForSQLWrite(props.situation, write));\n  const hopSequence = hopSequenceForTrace(trace);\n  return (\n    <>\n      <h5>{props.write.desc}</h5>\n      <WriteDesc\n        write={write}\n        setWrite={setWrite}\n        config={props.situation.config}\n      />\n      <HopSequenceView\n        formation={props.situation.config.formation}\n        sequence={hopSequence}\n        write={write}\n        setWrite={setWrite}\n        highlightedTrace={highlightedTrace}\n        setHighlightedTrace={setHighlightedTrace}\n      />\n      <TraceView\n        trace={trace}\n        highlightedTrace={highlightedTrace}\n        setHighlightedTrace={setHighlightedTrace}\n      />\n    </>\n  );\n}\n\nfunction WriteDesc(props: {\n  write: SQLWrite;\n  setWrite: (w: SQLWrite) => void;\n  config: Configuration;\n}) {\n  const write = props.write;\n  const partitionNames = props.config.table.indexes[0].partitions.map(\n    p => p.name,\n  );\n  return (\n    <p>\n      Write from node <strong>n{props.write.gateWayNodeID}</strong> to table{\" \"}\n      <strong>{write.tableName}</strong>, partition{\" \"}\n      <select\n        value={write.partitionName}\n        onChange={evt =>\n          props.setWrite({ ...props.write, partitionName: evt.target.value })\n        }\n      >\n        {partitionNames.map(pn => (\n          <option>{pn}</option>\n        ))}\n      </select>\n      :\n    </p>\n  );\n}\n","import React, { useState } from \"react\";\nimport {\n  singleNode,\n  threeNodesOneRegion,\n  threeNodesThreeRegions,\n  usersTableDupIndexes,\n  usersTableLeaseholderPartitioned,\n  usersTablePartitioned,\n  usersTableUnPartitioned,\n} from \"./configurations\";\nimport { SituationView } from \"./views/situationView\";\nimport { Route, BrowserRouter as Router, Link } from \"react-router-dom\";\nimport \"./App.css\";\nimport { Situation, SQLWrite } from \"./model\";\nimport { ConfigurationView } from \"./views/configurationMatrix\";\n\ninterface Pattern {\n  id: string;\n  name: string;\n  situation: Situation;\n  writes: { desc: string; write: SQLWrite }[];\n}\n\nconst development: Pattern = {\n  id: \"development\",\n  name: \"Development\",\n  situation: {\n    config: {\n      formation: singleNode,\n      table: usersTableUnPartitioned,\n    },\n    downNodeIDs: [],\n  },\n  writes: [\n    {\n      desc: \"simple write\",\n      write: {\n        gateWayNodeID: 1,\n        tableName: \"users\",\n        partitionName: \"default\",\n      },\n    },\n  ],\n};\n\nconst basicProduction: Pattern = {\n  id: \"basic-production\",\n  name: \"Basic Production\",\n  situation: {\n    config: {\n      formation: threeNodesOneRegion,\n      table: usersTableUnPartitioned,\n    },\n    downNodeIDs: [],\n  },\n  writes: [\n    {\n      desc: \"\",\n      write: {\n        gateWayNodeID: 1,\n        tableName: \"users\",\n        partitionName: \"default\",\n      },\n    },\n  ],\n};\n\nconst naiveMultiregion: Pattern = {\n  id: \"naive-multiregion\",\n  name: \"Naive Multiregion\",\n  situation: {\n    config: {\n      formation: threeNodesThreeRegions,\n      table: usersTableUnPartitioned,\n    },\n    downNodeIDs: [],\n  },\n  writes: [\n    {\n      desc: \"local write (lucky!)\",\n      write: {\n        tableName: \"users\",\n        partitionName: \"default\",\n        gateWayNodeID: 3,\n      },\n    },\n    {\n      desc: \"non-local write (bad!)\",\n      write: {\n        tableName: \"users\",\n        partitionName: \"default\",\n        gateWayNodeID: 4,\n      },\n    },\n  ],\n};\n\nconst geoPartitionedReplicas: Pattern = {\n  id: \"geo-partitioned-replicas\",\n  name: \"Geo-Partitioned Replicas\",\n  situation: {\n    config: {\n      formation: threeNodesThreeRegions,\n      table: usersTablePartitioned,\n    },\n    downNodeIDs: [2, 3],\n  },\n  writes: [\n    {\n      desc: \"Local, partitioned write (good!)\",\n      write: {\n        gateWayNodeID: 2,\n        tableName: \"users\",\n        partitionName: \"west\",\n      },\n    },\n  ],\n};\n\nconst geoPartitionedLeaseholders: Pattern = {\n  id: \"geo-partitioned-leaseholders\",\n  name: \"Geo-Partitioned Leaseholders\",\n  situation: {\n    config: {\n      formation: threeNodesThreeRegions,\n      table: usersTableLeaseholderPartitioned,\n    },\n    downNodeIDs: [],\n  },\n  writes: [\n    {\n      desc: \"\",\n      write: {\n        partitionName: \"west\",\n        tableName: \"postal_codes\",\n        gateWayNodeID: 2,\n      },\n    },\n  ],\n};\n\nconst duplicateIndexes: Pattern = {\n  id: \"duplicate-indexes\",\n  name: \"Duplicate Indexes\",\n  situation: {\n    config: {\n      formation: threeNodesThreeRegions,\n      table: usersTableDupIndexes,\n    },\n    downNodeIDs: [],\n  },\n  writes: [\n    {\n      desc: \"\",\n      write: {\n        partitionName: \"default\",\n        tableName: \"postal_codes\",\n        gateWayNodeID: 2,\n      },\n    },\n  ],\n};\n\nfunction IndexPage() {\n  return (\n    <div className=\"container\">\n      <h1>Topology Patterns Illustration</h1>\n      <p>\n        An alternative illustration of the patterns documented here:{\" \"}\n        <a href=\"https://www.cockroachlabs.com/docs/stable/topology-patterns.html\">\n          Topology Patterns\n        </a>\n        .\n      </p>\n\n      <h2>Single-Region Patterns</h2>\n\n      <PatternPreview pattern={development} />\n\n      <PatternPreview pattern={basicProduction} />\n\n      <h2>Multi-Region Patterns</h2>\n      <p>These patterns involve a cluster with servers in multiple regions.</p>\n\n      <PatternPreview pattern={naiveMultiregion} />\n\n      <PatternPreview pattern={geoPartitionedReplicas} />\n\n      <PatternPreview pattern={geoPartitionedLeaseholders} />\n\n      <PatternPreview pattern={duplicateIndexes} />\n    </div>\n  );\n}\n\nfunction PatternPreview(props: { pattern: Pattern }) {\n  const [downNodes, setDownNodes] = useState<number[]>([]);\n  return (\n    <>\n      <h3>\n        <Link to={props.pattern.id}>{props.pattern.name}</Link>\n      </h3>\n      <ConfigurationView\n        config={props.pattern.situation.config}\n        downNodeIDs={downNodes}\n        setDownNodeIDs={setDownNodes}\n      />\n    </>\n  );\n}\n\nfunction PatternPage(props: { pattern: Pattern }) {\n  return (\n    <div className=\"container\">\n      <p>\n        <Link to=\"/\">&lt; Patterns</Link>\n      </p>\n      <h1>{props.pattern.name}</h1>\n      <SituationView\n        situation={props.pattern.situation}\n        writes={props.pattern.writes}\n      />\n    </div>\n  );\n}\n\nconst PATTERNS = [\n  development,\n  basicProduction,\n  naiveMultiregion,\n  geoPartitionedReplicas,\n  geoPartitionedLeaseholders,\n  duplicateIndexes,\n];\n\nfunction App() {\n  return (\n    <Router>\n      <Route path=\"/\" component={IndexPage} exact />\n      {PATTERNS.map(p => (\n        <Route\n          key={p.id}\n          path={`/${p.id}`}\n          component={() => <PatternPage pattern={p} />}\n        />\n      ))}\n    </Router>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}